import java.text.SimpleDateFormat
import java.util.*

plugins {
  java
  id("eclipse")
  id("idea")
  id("net.minecraftforge.gradle") version "[6.0.16,6.2)" apply false
  id("forge-gradle-kts") apply false
}

subprojects {
  apply(plugin = "org.gradle.java")
  apply(plugin = "forge-gradle-kts")
  apply(plugin = "net.minecraftforge.gradle")

  group = mod_group_id
  version = mod_version

  java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
  }

  base {
    archivesName.set(mod_name)
  }

  // This block of code expands all declared replace properties in the specified resource targets.
  // A missing property will result in an error. Properties are expanded using ${} Groovy notation.
  // When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
  // See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
  tasks.named<ProcessResources>("processResources").configure {
    var replaceProperties = mapOf(
      "minecraft_version" to minecraft_version,
      "minecraft_version_range" to minecraft_version_range,
      "forge_version" to forge_version,
      "forge_version_range" to forge_version_range,
      "loader_version_range" to loader_version_range,
      "mod_id" to mod_id,
      "mod_name" to mod_name,
      "mod_license" to mod_license,
      "mod_version" to mod_version,
      "mod_authors" to mod_authors,
      "mod_description" to mod_description,
    )

    inputs.properties(replaceProperties)

    filesMatching(listOf("META-INF/mods.toml", "pack.mcmeta")) {
      expand(replaceProperties + mapOf("project" to project.name))
    }
  }

  // Include resources generated by data generators.
  sourceSets {
    main {
      resources { srcDir("src/generated/resources") }
    }
  }

  dependencies {
    // lombok
    val lombokVersion = "1.18.38"
    compileOnly("org.projectlombok", "lombok", lombokVersion)
    annotationProcessor("org.projectlombok", "lombok", lombokVersion)
    testCompileOnly("org.projectlombok", "lombok", lombokVersion)
    testAnnotationProcessor("org.projectlombok", "lombok", lombokVersion)
  }

// Example for how to get properties into the manifest for reading at runtime.
  tasks.named<Jar>("jar").configure {
    manifest {
      attributes(
        mapOf(
          "Specification-Title" to mod_id,
          "Specification-Vendor" to mod_authors,
          "Specification-Version" to "1", // We are version 1 of ourselves
          "Implementation-Title" to project.name,
          "Implementation-Version" to this@configure.archiveVersion,
          "Implementation-Vendor" to mod_authors,
          "Implementation-Timestamp" to SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ").format(Date()),
        )
      )
    }

    if (isBuildTask) {
      // This is the preferred method to reobfuscate your jar file
      finalizedBy("reobfJar")
    }
  }

  tasks.withType<JavaCompile>().configureEach {
    options.encoding = "UTF-8" // Use the UTF-8 charset for Java compilation
  }
}
